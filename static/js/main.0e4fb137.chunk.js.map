{"version":3,"sources":["Counter/Counter.module.css","SettingWindows/SettingWindow.module.css","Button/But.tsx","Counter/Counter.tsx","SettingWindows/SettingsWindow.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","But","props","Button","style","fontFamily","color","borderColor","variant","size","onClick","click","disabled","title","Counter","className","s","counter","Paper","elevation","square","backgroundColor","maxValue","maximum","usual","screen","error","handlerError","buttons","add","reset","Settings","useState","minValue","setMinValue","setMaxValue","TextField","id","label","type","InputLabelProps","shrink","onChange","e","newValue","Number","parseInt","currentTarget","value","checkValue","defaultValue","isNaN","settingValues","saveState","App","state","key","defaultState","stateAsString","localStorage","getItem","JSON","parse","restoreState","setCounter","setError","stringify","setItem","oldMaxValue","oldMinValue","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0e4fb137.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__wi-DS\",\"screen\":\"Counter_screen__2dLW-\",\"buttons\":\"Counter_buttons__1evUz\",\"usual\":\"Counter_usual__2ZgUg\",\"maximum\":\"Counter_maximum__Cq53m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"SettingWindow_counter__pdqQZ\",\"screen\":\"SettingWindow_screen__29PP7\",\"buttons\":\"SettingWindow_buttons__3EVvN\"};","import React from 'react';\r\nimport {Button} from '@material-ui/core';\r\n\r\n\r\nexport type ButType = {\r\n    click: () => void\r\n    disabled: boolean\r\n    title: string\r\n}\r\n\r\n\r\nfunction But(props: ButType) {\r\n\r\n    return (\r\n            <Button\r\n                style={{\r\n                    fontFamily: 'inherit',\r\n                    color: '#ae5c6a',\r\n                    borderColor: \"#ae5c6a\"\r\n                }}\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                onClick={props.click}\r\n                disabled={props.disabled}\r\n            >\r\n                {props.title} </Button>\r\n    );\r\n}\r\n\r\nexport default But;\r\n","import React from 'react';\nimport But from '../Button/But';\nimport {Paper} from '@material-ui/core';\nimport s from './Counter.module.css'\n\n\nexport type CounterType = {\n    counter: number\n    add: () => void\n    reset: () => void\n    disabled?: boolean\n    minValue: number\n    maxValue: number\n    error: String\n}\n\n\nfunction Counter(props: CounterType) {\n\n    function handlerError() {\n        switch (props.error) {\n            case 'incorrect' :\n                return 'incorrect value'\n            case 'tabSet':\n                return 'press \\'set\\''\n            case 'enter value':\n                return 'enter value'\n            default:\n                return props.counter\n        }\n    }\n//can be without checking\n    return (\n      <div className={s.counter}>\n        <Paper elevation={24}\n        square={false}\n               style={{\n                   backgroundColor: \"#dceef8\"\n               }}\n        >\n            <div className={`${props.counter == props.maxValue ? s.maximum : s.usual} ${s.screen}`} >\n                {handlerError()}\n            </div>\n            <div className={s.buttons}>\n                <But\n                    title=\"add\"\n                    click={props.add}\n                    disabled={props.error!==\"work\"  || props.counter == props.maxValue}\n                />\n                <But\n                    title=\"reset\"\n                    click={props.reset}\n                    disabled={props.error!==\"work\"}\n                />\n            </div>\n        </Paper>\n    </div>\n    );\n}\n\nexport default Counter;\n","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './SettingWindow.module.css'\r\nimport But from '../Button/But';\r\nimport {Button, Paper, TextField} from '@material-ui/core';\r\nimport {StateType} from '../App';\r\n\r\n\r\nexport type SettingsType = {\r\n    maxValue:number\r\n    minValue:number\r\n    settingValues: (state:StateType) => void\r\n    saveState: (key:string, state:StateType) => void\r\n    checkValue:(maxValue:number, minValue:number,oldMaxValue:number,oldMinValue:number)=>void\r\n    error:string\r\n}\r\n\r\n\r\nfunction Settings(props: SettingsType) {\r\n\r\n    let [minValue, setMinValue] = useState<number>(props.minValue)\r\n    let [maxValue, setMaxValue] = useState<number>(props.maxValue)\r\n\r\n    const onChangeForMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newValue = Number.parseInt(e.currentTarget.value)\r\n        props.checkValue(newValue,minValue,maxValue,minValue)\r\n        setMaxValue(newValue)\r\n\r\n    }\r\n    const onChangeForMinValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newValue = Number.parseInt(e.currentTarget.value)\r\n        props.checkValue(maxValue,newValue,maxValue,minValue)\r\n        setMinValue(newValue)\r\n    }\r\n\r\n    let setCallback = () => {\r\n        props.settingValues({maxValue,minValue})\r\n        props.checkValue(maxValue,minValue,maxValue,minValue)\r\n        props.saveState('savedValues', {maxValue,minValue})\r\n    }\r\n\r\n    return (\r\n        <div className={s.counter}>\r\n        <Paper  style={{\r\n            backgroundColor: \"#dceef8\"\r\n        }}\r\n            elevation={24}\r\n            square={false}\r\n       >\r\n            <div  className={s.screen}>\r\n                <div>\r\n                <TextField\r\n                    style={{\r\n                        fontFamily: 'inherit',\r\n                        color: '#ae5c6a',\r\n                        borderColor: \"#ae5c6a\"\r\n                    }}\r\n                    id=\"outlined-password-input\"\r\n                    label=\"Max value\"\r\n                    type=\"number\"\r\n                    size=\"small\"\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    onChange={onChangeForMaxValue}\r\n                    defaultValue={props.maxValue}\r\n                    error={maxValue <= minValue || maxValue > 10 || isNaN(maxValue)}\r\n                />\r\n                </div>\r\n                <div>\r\n                <TextField\r\n                    id=\"outlined-password-input\"\r\n                    label=\"Start value\"\r\n                    type=\"number\"\r\n                    size=\"small\"\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    onChange={onChangeForMinValue}\r\n                    defaultValue={props.minValue}\r\n                    error={maxValue <= minValue || minValue < 0 || isNaN(minValue)}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className={s.buttons}>\r\n                <But disabled={props.error!==\"work\" && props.error!==\"tabSet\"}\r\n                     title={'set'}\r\n                     click={setCallback}/>\r\n            </div>\r\n        </Paper>\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default Settings;","import React, {useState} from 'react';\nimport './App.css';\nimport Counter from './Counter/Counter';\nimport Settings from './SettingWindows/SettingsWindow';\n\n\nexport type StateType = {\n    maxValue: number\n    minValue: number\n}\n\nfunction App() {\n\n    function saveState<StateType>(key: string, state: StateType) {\n        const stateAsString = JSON.stringify(state);\n        localStorage.setItem(key, stateAsString)\n    }\n\n    function restoreState<StateType>(key: string, defaultState: StateType) {\n        const stateAsString = localStorage.getItem(key);\n        if (stateAsString !== null) defaultState = JSON.parse(stateAsString) as StateType;\n        return defaultState;\n    }\n\n    const state: StateType = restoreState<StateType>('savedValues', {maxValue: 10, minValue: 0});\n\n    let [minValue, setMinValue] = useState<number>(state.minValue)\n    let [maxValue, setMaxValue] = useState<number>(state.maxValue)\n    let [counter, setCounter] = useState<number>(state.minValue)\n    let [error, setError] = useState<string>('work')\n\n    function checkValue(maxValue: number, minValue: number, oldMaxValue: number, oldMinValue: number) {\n        if (maxValue <= minValue || maxValue > 10 || minValue < 0) {\n            setError('incorrect')\n        } else if (isNaN(minValue) || isNaN(maxValue)) {\n            setError('enter value')\n        } else if (oldMaxValue != maxValue || oldMinValue != minValue) {\n            setError('tabSet')\n        } else {\n            setError('work')\n        }\n    }\n\n    function add() {\n        setCounter(counter + 1)\n    }\n\n    function reset() {\n        setCounter(state.minValue)\n    }\n\n    function settingValues(state: StateType) {\n        setMaxValue(state.maxValue)\n        setCounter(state.minValue)\n        setMinValue(state.minValue)\n    }\n\n    return (<div className={\"wrapper\"}>\n            <Settings\n                minValue={state.minValue}\n                maxValue={state.maxValue}\n                saveState={saveState}\n                settingValues={settingValues}\n                checkValue={checkValue}\n                error={error}\n            />\n            <Counter\n                minValue={minValue}\n                maxValue={maxValue}\n                counter={counter}\n                add={add}\n                reset={reset}\n                error={error}\n            />\n        </div>\n\n\n\n\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}